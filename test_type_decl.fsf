type tree = Empty
type tree = Empty | Node
type tree[A] = Empty | Node
type tree[A,B,C] = Empty | Node
type tree[A,B,C] = Empty | Node(n:nat)
type tree[A,B,C] = Empty | Node(n:nat,f:float)
type tree[A,B,C] = Empty(b:bool) | Node(n:nat)
type tree[A,B,C] = Empty(b:bool) | Node(n:list[A])
type tree[A,B] = Empty(a:list[A,nat[B]])
type nat = Zero | Succ(n:nat)
type bool = True | False
type bintree = Empty | Node(val:nat,left:bintree,right:bintree)
type ord = Lower | Equal | Greater
type option[T] = None | Some(v:T)
type list[T] = Nil | Cons(hd:T, tl:list[T])
type even = Zero | ENext (n:odd)
and odd = ONext(m:even)
and abc[A,B] = Abc(a:list[list[A,B],A,ref[C]])